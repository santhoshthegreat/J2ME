com.de.Agecalc -> com.de.Agecalc:
    boolean midletPaused -> midletPaused
    de.enough.polish.ui.Command exitCommand -> exitCommand
    de.enough.polish.ui.Command exitCommand1 -> exitCommand1
    de.enough.polish.ui.Command itemCommand -> itemCommand
    de.enough.polish.ui.Form form -> form
    de.enough.polish.ui.DateField dateField -> dateField
    de.enough.polish.ui.StringItem stringItem -> stringItem
    javax.microedition.lcdui.Image image -> image
    void initialize() -> initialize
    void startMIDlet() -> startMIDlet
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Displayable) -> commandAction
    de.enough.polish.ui.Command getExitCommand() -> getExitCommand
    javax.microedition.lcdui.Image getImage() -> getImage
    de.enough.polish.ui.Command getExitCommand1() -> getExitCommand1
    de.enough.polish.ui.Command getItemCommand() -> getItemCommand
    de.enough.polish.ui.DateField getDateField() -> getDateField
    de.enough.polish.ui.StringItem getStringItem() -> getStringItem
    de.enough.polish.ui.Display getDisplay() -> getDisplay
    void exitMIDlet() -> exitMIDlet
    void startApp() -> startApp
    void pauseApp() -> pauseApp
    void destroyApp(boolean) -> destroyApp
de.enough.polish.midp.ui.NativeCommandListener -> af:
    de.enough.polish.ui.CommandListener listener -> a
    de.enough.polish.ui.Displayable displayable -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
de.enough.polish.midp.ui.NativeDisplayImpl -> n:
    javax.microedition.lcdui.Display display -> a
    void callSerially(java.lang.Runnable) -> a
    int getColor(int) -> a
    void setCurrent(de.enough.polish.ui.Display) -> a
    void setCurrent(de.enough.polish.ui.Displayable) -> a
    de.enough.polish.midp.ui.NativeDisplayImpl getDisplay(javax.microedition.midlet.MIDlet) -> a
de.enough.polish.midp.ui.TextBox -> g:
    void addCommand(de.enough.polish.ui.Command) -> a
    void setCommandListener(de.enough.polish.ui.CommandListener) -> a
    void sizeChanged(int,int) -> sizeChanged
de.enough.polish.ui.Alert -> w:
    de.enough.polish.ui.Command DISMISS_COMMAND -> a
    int timeout -> q
    long showTime -> c
    de.enough.polish.ui.IconItem iconItem -> a
    de.enough.polish.ui.Gauge indicator -> a
    de.enough.polish.ui.Displayable nextDisplayable -> a
    int numberOfCommands -> r
    de.enough.polish.ui.Style contentStyle -> b
    void addCommand(de.enough.polish.ui.Command) -> a
    void removeCommand(de.enough.polish.ui.Command) -> b
    void setCommandListener(de.enough.polish.ui.CommandListener) -> a
    void createItem(java.lang.String,javax.microedition.lcdui.Image,de.enough.polish.ui.Style) -> a
    void setString(java.lang.String) -> a
    void setString(java.lang.String,de.enough.polish.ui.Style) -> a
    java.lang.String createCssSelector() -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Displayable) -> commandAction
    void showNotify() -> a
    void setStyle(de.enough.polish.ui.Style) -> a
de.enough.polish.ui.Animatable -> f:
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
de.enough.polish.ui.AnimationThread -> z:
    boolean releaseResourcesOnScreenChange -> a
    de.enough.polish.util.ArrayList animationList -> a
    long totalDelta -> a
    void run() -> run
    void addAnimationItem(de.enough.polish.ui.Animatable) -> a
    void removeAnimationItem(de.enough.polish.ui.Animatable) -> b
de.enough.polish.ui.Background -> j:
    int borderWidth -> a
    void animate(de.enough.polish.ui.Screen,de.enough.polish.ui.Item,long,de.enough.polish.ui.ClippingRegion) -> a
    void addRelativeToBackgroundRegion(de.enough.polish.ui.ClippingRegion,de.enough.polish.ui.Screen,de.enough.polish.ui.Item,int,int,int,int) -> a
    boolean animate() -> a
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void releaseResources() -> a
    void hideNotify() -> b
    void showNotify() -> c
de.enough.polish.ui.Border -> bi:
    int borderWidthTop -> a
    int borderWidthBottom -> b
    int borderWidthLeft -> c
    int borderWidthRight -> d
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void animate(de.enough.polish.ui.Screen,de.enough.polish.ui.Item,long,de.enough.polish.ui.ClippingRegion) -> a
    boolean animate() -> a
    void hideNotify() -> a
    void showNotify() -> b
de.enough.polish.ui.Canvas -> ai:
    de.enough.polish.ui.CommandListener _commandListener -> a
    boolean _isShown -> f
    de.enough.polish.util.IdentityArrayList _commands -> a
    java.lang.String _title -> b
    int getGameAction(int) -> a
    void keyPressed(int) -> a
    void keyRepeated(int) -> b
    void keyReleased(int) -> c
    void repaint() -> g
    void serviceRepaints() -> h
    void _showNotify() -> i
    void _hideNotify() -> j
    void _hideNotifyExternal() -> k
    void showNotify() -> a
    void hideNotify() -> d
    void hideNotifyExternal() -> l
    void paint(javax.microedition.lcdui.Graphics) -> a
    void sizeChanged(int,int) -> sizeChanged
    boolean isShown() -> c
    int getWidth() -> f
    void setCommandListener(de.enough.polish.ui.CommandListener) -> a
    de.enough.polish.ui.CommandListener getCommandListener() -> a
    void addCommand(de.enough.polish.ui.Command) -> a
    void removeCommand(de.enough.polish.ui.Command) -> b
    void setTitle(java.lang.String) -> b
    java.lang.String getTitle() -> b
de.enough.polish.ui.ClippingRegion -> ae:
    int leftX -> a
    int topY -> b
    int rightX -> c
    int bottomY -> d
    boolean containsRegion -> a
    void reset() -> a
    void addRegion(int,int,int,int) -> a
    boolean containsRegion() -> a
    int getX() -> a
    int getY() -> b
    int getWidth() -> c
    int getHeight() -> d
    java.lang.String toString() -> toString
de.enough.polish.ui.Color -> ce:
    int argb -> a
    boolean isDynamic -> a
    java.lang.Integer integer -> a
    java.lang.Integer getInteger() -> a
    int getColor() -> a
    java.lang.String toString() -> toString
de.enough.polish.ui.Command -> ab:
    java.lang.String longLabel -> a
    int commandType -> a
    int priority -> b
    int childIndicatorWidth -> c
    int childIndicatorHeight -> d
    de.enough.polish.ui.Style style -> a
    java.lang.String label -> b
    de.enough.polish.ui.ItemCommandListener itemCommandListener -> a
    de.enough.polish.ui.CommandListener commandListener -> a
    java.lang.String getLabel() -> getLabel
    java.lang.String getLongLabel() -> getLongLabel
    int getCommandType() -> getCommandType
    int getPriority() -> getPriority
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean commandAction(de.enough.polish.ui.Item,de.enough.polish.ui.Displayable) -> a
    de.enough.polish.ui.Style getStyle() -> a
de.enough.polish.ui.CommandItem -> b:
    de.enough.polish.ui.Command command -> a
    de.enough.polish.ui.Container children -> a
    boolean hasChildren -> a
    int childIndicatorWidth -> S
    int childIndicatorYOffset -> T
    int childIndicatorHeight -> U
    boolean isOpen -> d
    void initContent(int,int,int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void paintChildren(int,int,int,int,javax.microedition.lcdui.Graphics) -> a_
    boolean handleKeyPressed(int,int) -> a
    boolean handleKeyReleased(int,int) -> b
    void open(boolean) -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void hideNotify() -> a
    void defocus(de.enough.polish.ui.Style) -> b
de.enough.polish.ui.CommandListener -> aa:
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Displayable) -> commandAction
de.enough.polish.ui.Container -> p:
    de.enough.polish.util.ArrayList itemsList -> a
    boolean autoFocusEnabled -> a
    int autoFocusIndex -> a
    de.enough.polish.ui.Style itemStyle -> a
    de.enough.polish.ui.Item focusedItem -> a
    int focusedIndex -> b
    boolean enableScrolling -> b
    boolean allowCycling -> c
    int yOffset -> c
    int targetYOffset -> d
    int focusedTopMargin -> f
    de.enough.polish.ui.ContainerView containerView -> a
    boolean isScrollRequired -> e
    int scrollHeight -> e
    de.enough.polish.ui.Item[] containerItems -> a
    boolean showCommandsHasBeenCalled -> f
    de.enough.polish.ui.Item scrollItem -> c
    de.enough.polish.ui.Style plainStyle -> b
    boolean isIgnoreMargins -> t
    boolean appearanceModeSet -> d
    int scrollDirection -> g
    int scrollSpeed -> h
    int scrollDamping -> i
    long lastAnimationTime -> a
    void setScrollHeight(int) -> b
    int getScrollHeight() -> a
    int getContentScrollHeight() -> b
    void add(de.enough.polish.ui.Item) -> a
    void add(int,de.enough.polish.ui.Item) -> a
    de.enough.polish.ui.Item get(int) -> a
    de.enough.polish.ui.Item remove(int) -> b
    boolean focusClosestItem(int) -> a
    int size() -> c
    de.enough.polish.ui.Item[] getItems() -> a
    boolean focusChild(int) -> b
    void focusChild(int,de.enough.polish.ui.Item,int,boolean) -> a
    de.enough.polish.ui.Style getFocusedStyle(int,de.enough.polish.ui.Item) -> a
    boolean scroll(int,de.enough.polish.ui.Item,boolean) -> a
    boolean scroll(int,int,int,int,int,boolean) -> a
    void initContent(int,int,int) -> a
    void updateInternalPosition(de.enough.polish.ui.Item) -> b
    void setContentWidth(int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void paintBackgroundAndBorder(int,int,int,int,javax.microedition.lcdui.Graphics) -> b
    java.lang.String createCssSelector() -> a
    boolean handleKeyPressed(int,int) -> a
    boolean handleNavigate(int,int) -> d
    boolean handleKeyReleased(int,int) -> b
    boolean handleKeyRepeated(int,int) -> c
    boolean shiftFocus(boolean,int) -> a
    int getFocusedIndex() -> d
    de.enough.polish.ui.Item getFocusedItem() -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyleWithBackground(de.enough.polish.ui.Style,boolean) -> b
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    de.enough.polish.ui.Style focus(de.enough.polish.ui.Style,int) -> a
    void defocus(de.enough.polish.ui.Style) -> b
    void showCommands() -> a_
    boolean handleCommand(de.enough.polish.ui.Command) -> a_
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void showNotify() -> c
    void hideNotify() -> a
    int getItemAreaHeight() -> e
    int getScrollYOffset() -> f
    int getRelativeScrollYOffset() -> g
    void setScrollYOffset(int) -> c
    void setScrollYOffset(int,boolean) -> a
    int getNumberOfInteractiveItems() -> h
    int getAbsoluteY() -> i
    int getAbsoluteX() -> j
    de.enough.polish.ui.ItemView getView(de.enough.polish.ui.ItemView,de.enough.polish.ui.Style) -> a
    int getMarginBottom(int) -> a
    int getMarginLeft(int) -> b
    int getMarginRight(int) -> c
    int getMarginTop(int) -> d
    void onScreenSizeChanged(int,int) -> a
de.enough.polish.ui.ContainerView -> cf:
    int xOffset -> m
    int targetXOffset -> n
    int focusedIndex -> h
    de.enough.polish.ui.Container parentContainer -> a
    boolean restartAnimation -> d
    boolean focusFirstElement -> e
    int appearanceMode -> i
    de.enough.polish.ui.Item focusedItem -> b
    int columnsSetting -> j
    int numberOfColumns -> k
    de.enough.polish.ui.Dimension[] columnsWidths -> a
    int[] rowsHeights -> a
    int numberOfRows -> l
    boolean allowCycling -> f
    boolean isAlignHeights -> g
    boolean allowsAutoTraversal -> h
    boolean isHorizontal -> i
    boolean isVertical -> j
    boolean allowsDirectSelectionByPointerEvent -> k
    int lastAvailableContentWidth -> o
    int scrollDirection -> p
    int scrollSpeed -> q
    int scrollDamping -> r
    long lastAnimationTime -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void setScrollXOffset(int,boolean) -> a
    int getScrollXOffset() -> a
    int getScrollTargetXOffset() -> b
    void addFullRepaintRegion(de.enough.polish.ui.Item,de.enough.polish.ui.ClippingRegion) -> a
    void initContent(de.enough.polish.ui.Item,int,int,int) -> b
    boolean isLayoutExpand() -> b
    void paintContent(de.enough.polish.ui.Item,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void paintContent(de.enough.polish.ui.Container,de.enough.polish.ui.Item[],int,int,int,int,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void paintItem(de.enough.polish.ui.Item,int,int,int,int,int,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    de.enough.polish.ui.Item getNextItem(int,int) -> a
    de.enough.polish.ui.Item shiftFocus(boolean,int,de.enough.polish.ui.Item[]) -> a
    boolean isInBottomRow(int) -> a
    void focusItem(int,de.enough.polish.ui.Item) -> a
    void focusItem(int,de.enough.polish.ui.Item,int) -> a
    void setStyle(de.enough.polish.ui.Style) -> b
    void showNotify() -> a
    de.enough.polish.ui.Screen getScreen() -> a
    boolean handleKeyPressed(int,int) -> a
    boolean isValid(de.enough.polish.ui.Item,de.enough.polish.ui.Style) -> a
    de.enough.polish.ui.Style focusItem(int,de.enough.polish.ui.Item,int,de.enough.polish.ui.Style) -> a
    boolean isVirtualContainer() -> c
de.enough.polish.ui.DateField -> a:
    java.util.Date date -> a
    int inputMode -> e
    java.util.TimeZone timeZone -> a
    boolean showCaret -> a
    int originalWidth -> f
    int originalHeight -> g
    long lastCaretSwitch -> a
    java.util.Calendar calendar -> a
    int[] DAYS_IN_MONTHS -> b
    int editIndex -> h
    int textComplementColor -> i
    int currentField -> j
    int currentFieldStartIndex -> S
    de.enough.polish.ui.ItemCommandListener additionalItemCommandListener -> b
    java.util.Date getDate() -> a
    void setDate(java.util.Date) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void initContent(int,int,int) -> a
    java.lang.String createCssSelector() -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    boolean animate() -> a
    void defocus(de.enough.polish.ui.Style) -> b
    void checkOutDate() -> d
    int getNextDateTimeEnd(int) -> e
    boolean handleKeyPressed(int,int) -> a
    boolean handleKeyReleased(int,int) -> b
    void moveBackward(boolean) -> a
    void moveForward(boolean) -> c
    void checkField(int,boolean) -> a
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Item) -> a
de.enough.polish.ui.Dimension -> db:
    int value -> a
    boolean isPercent -> a
    int factor -> b
    java.lang.String valueAsString -> a
    int getValue(int) -> a
    boolean isPercent() -> a
    void resolve() -> a
de.enough.polish.ui.Display -> an:
    de.enough.polish.ui.Display instance -> a
    de.enough.polish.ui.Displayable currentDisplayable -> a
    de.enough.polish.ui.Canvas currentCanvas -> a
    javax.microedition.midlet.MIDlet midlet -> a
    de.enough.polish.ui.NativeDisplay nativeDisplay -> a
    int screenWidth -> b
    int screenHeight -> c
    boolean enableScreenChangeAnimations -> a
    boolean showInfo -> b
    int currentInfoColor -> d
    de.enough.polish.ui.Displayable infoNextDisplayable -> b
    long infoStartTime -> a
    de.enough.polish.ui.CommandListener commandListener -> a
    int nonFullScreenHeight -> a
    de.enough.polish.ui.Displayable nextOrCurrentDisplayable -> c
    de.enough.polish.ui.Display getDisplay(javax.microedition.midlet.MIDlet) -> a
    int getColor(int) -> a
    de.enough.polish.ui.Displayable getCurrent() -> a
    void setCurrent(de.enough.polish.ui.Displayable) -> a
    boolean isSoftKeyLeft(int,int) -> a
    boolean isSoftKeyRight(int,int) -> b
    boolean isSoftKeyMiddle(int,int) -> c
    boolean isSoftKey(int,int) -> d
    void paint(javax.microedition.lcdui.Graphics) -> paint
    de.enough.polish.ui.Display getInstance() -> a
    void setCommandListener(de.enough.polish.ui.CommandListener) -> a
    void hideNotify() -> hideNotify
    void showNotify() -> showNotify
    void keyPressed(int) -> keyPressed
    void keyRepeated(int) -> keyRepeated
    void keyReleased(int) -> keyReleased
    void sizeChanged(int,int) -> sizeChanged
    void sizeChanged(int,int,boolean) -> a
    int getScreenHeight() -> a
    int getScreenWidth() -> b
    void requestRepaint(int,int,int,int) -> a
    void requestRepaint() -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    void run() -> run
de.enough.polish.ui.Display$1 -> ah:
    void paint(javax.microedition.lcdui.Graphics) -> paint
de.enough.polish.ui.Display$2 -> ag:
    void paint(javax.microedition.lcdui.Graphics) -> paint
de.enough.polish.ui.Displayable -> h:
    void sizeChanged(int,int) -> sizeChanged
de.enough.polish.ui.Form -> ad:
    java.lang.String createCssSelector() -> a
de.enough.polish.ui.Gauge -> x:
    int ANIMATION_MODE_BACKANDFORTH -> a
    int value -> b
    java.lang.String valueString -> a
    int maxValue -> c
    boolean isInteractive -> a
    int color -> d
    int mode -> e
    int chunkWidth -> f
    int gapWidth -> g
    int gapColor -> h
    javax.microedition.lcdui.Image image -> a
    int imageYOffset -> i
    javax.microedition.lcdui.Image indicatorImage -> b
    boolean isIndefinite -> b
    int indefinitePos -> j
    boolean showValue -> c
    int fontColor -> S
    javax.microedition.lcdui.Font font -> a
    int valueWidth -> T
    int valuePosition -> U
    void setValue(int) -> b
    void createIndicatorImage() -> d
    void updateIndefiniteIndicatorImage() -> l
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void initContent(int,int,int) -> a
    java.lang.String createCssSelector() -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    boolean handleKeyPressed(int,int) -> a
    boolean animate() -> a
    void hideNotify() -> a
    void showNotify() -> c
de.enough.polish.ui.IconItem -> u:
    javax.microedition.lcdui.Image image -> a
    int imageAlign -> e
    int imageHeight -> f
    int imageWidth -> g
    int yAdjustText -> h
    boolean isTextVisible -> c
    int relativeIconX -> i
    int relativeIconY -> j
    java.lang.String createCssSelector() -> a
    void initContent(int,int,int) -> a
    void setContentWidth(int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    void setImage(javax.microedition.lcdui.Image) -> a
    void setImage(javax.microedition.lcdui.Image,de.enough.polish.ui.Style) -> a
    void setImageAlign(int) -> b
de.enough.polish.ui.Item -> aj:
    de.enough.polish.util.ArrayList COMMANDS -> a
    int layout -> k
    de.enough.polish.ui.ItemCommandListener itemCommandListener -> a
    de.enough.polish.ui.Command defaultCommand -> d
    int preferredWidth -> l
    int preferredHeight -> m
    de.enough.polish.ui.Dimension minimumWidth -> a
    de.enough.polish.ui.Dimension minimumHeight -> b
    boolean isInitialized -> g
    de.enough.polish.ui.Background background -> b
    de.enough.polish.ui.Border border -> a
    de.enough.polish.ui.Style style -> c
    int itemWidth -> n
    int itemHeight -> o
    int paddingLeft -> p
    int paddingTop -> q
    int paddingRight -> r
    int paddingBottom -> s
    int paddingVertical -> t
    int paddingHorizontal -> u
    int marginLeft -> v
    int marginTop -> w
    int marginRight -> x
    int marginBottom -> y
    int contentWidth -> z
    int contentHeight -> A
    int availContentWidth -> B
    int availContentHeight -> C
    int backgroundWidth -> D
    int backgroundHeight -> E
    int appearanceMode -> F
    de.enough.polish.ui.Screen screen -> a
    java.lang.String cssSelector -> d
    boolean isStyleInitialised -> h
    de.enough.polish.ui.Item parent -> b
    de.enough.polish.util.ArrayList commands -> b
    boolean isLayoutCenter -> i
    boolean isLayoutExpand -> j
    boolean isLayoutRight -> k
    int relativeX -> G
    int relativeY -> H
    int contentX -> I
    int contentY -> J
    int internalX -> K
    int internalY -> L
    int internalWidth -> M
    int internalHeight -> N
    boolean isFocused -> l
    java.lang.String beforeUrl -> a
    int beforeWidth -> a
    int beforeHeight -> b
    javax.microedition.lcdui.Image beforeImage -> a
    java.lang.String afterUrl -> b
    int afterWidth -> c
    int afterHeight -> d
    javax.microedition.lcdui.Image afterImage -> b
    de.enough.polish.ui.Style labelStyle -> d
    de.enough.polish.ui.StringItem label -> a
    boolean useSingleRow -> m
    de.enough.polish.ui.Style focusedStyle -> e
    boolean isPressed -> n
    de.enough.polish.ui.Style normalStyle -> a
    de.enough.polish.ui.Style pressedStyle -> b
    int backgroundYOffset -> O
    de.enough.polish.ui.ItemView view -> a
    boolean preserveViewType -> o
    boolean setView -> p
    boolean isShown -> q
    int opacity -> P
    int[] opacityRgbData -> a
    boolean opacityPaintNormally -> r
    int opacityAtGeneration -> e
    de.enough.polish.ui.ItemStateListener itemStateListener -> a
    int availableWidth -> Q
    int availableHeight -> R
    boolean ignoreRepaintRequests -> s
    boolean preserveBackground -> a
    boolean preserveBorder -> b
    void setLabel(java.lang.String) -> d
    int getLayout() -> k
    void setLayout(int) -> d
    int getAppearanceMode() -> l
    void setStyle(de.enough.polish.ui.Style) -> a
    de.enough.polish.ui.ItemView getView(de.enough.polish.ui.ItemView,de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    int getItemWidth(int,int,int) -> a
    int getItemHeight(int,int,int) -> b
    void addCommand(de.enough.polish.ui.Command) -> a
    void addCommand(de.enough.polish.ui.Command,de.enough.polish.ui.Style) -> a
    void removeCommand(de.enough.polish.ui.Command) -> b
    void repaintFully() -> e
    void repaint() -> f
    int getBorderWidthLeft() -> m
    int getBorderWidthRight() -> n
    int getBorderWidthTop() -> o
    int getBorderWidthBottom() -> p
    void repaint(int,int,int,int) -> a
    void requestInit() -> g
    de.enough.polish.ui.Screen getScreen() -> a
    void notifyStateChanged() -> h
    void setAvailableDimensions(int,int) -> b
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> c
    void paintBackgroundAndBorder(int,int,int,int,javax.microedition.lcdui.Graphics) -> b
    void paintBorder(int,int,int,int,javax.microedition.lcdui.Graphics) -> d
    void paintBackground(int,int,int,int,javax.microedition.lcdui.Graphics) -> e
    void init(int,int,int) -> b
    int getMarginRight(int) -> c
    int getMarginLeft(int) -> b
    int getMarginTop(int) -> d
    int getMarginBottom(int) -> a
    void setContentWidth(int) -> a
    void initStyle() -> i
    void initContent(int,int,int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    java.lang.String createCssSelector() -> a
    boolean handleKeyPressed(int,int) -> a
    boolean handleKeyRepeated(int,int) -> c
    boolean handleKeyReleased(int,int) -> b
    void notifyVisited() -> j
    boolean notifyItemPressedStart() -> b
    void notifyItemPressedEnd() -> k
    void addRelativeToContentRegion(de.enough.polish.ui.ClippingRegion,int,int,int,int) -> a
    void addRelativeToBackgroundRegion(de.enough.polish.ui.ClippingRegion,int,int,int,int) -> b
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    boolean animate() -> a
    de.enough.polish.ui.Style getFocusedStyle() -> b
    de.enough.polish.ui.Style focus(de.enough.polish.ui.Style,int) -> a
    void showCommands() -> a_
    void addCommands(de.enough.polish.util.ArrayList) -> a
    boolean handleCommand(de.enough.polish.ui.Command) -> a_
    void defocus(de.enough.polish.ui.Style) -> b
    void showNotify() -> c
    void hideNotify() -> a
    int getAbsoluteX() -> j
    int getAbsoluteY() -> i
    int getItemAreaHeight() -> e
    int getBackgroundX() -> q
    int getBackgroundY() -> r
    void setInitialized(boolean) -> b
    boolean isInitialized() -> c
    void setItemHeight(int) -> e
    boolean isLayoutRight() -> d
    boolean isLayoutCenter() -> e
    boolean isLayoutBottom() -> f
    boolean isLayoutVerticalCenter() -> g
    boolean isLayoutVerticalShrink() -> h
    boolean isLayoutNewlineAfter() -> i
    void onScreenSizeChanged(int,int) -> a
de.enough.polish.ui.ItemCommandListener -> s:
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Item) -> a
de.enough.polish.ui.ItemStateListener -> k:
    void itemStateChanged(de.enough.polish.ui.Item) -> a
de.enough.polish.ui.ItemView -> dl:
    int contentWidth -> a
    int contentHeight -> b
    int availableWidth -> c
    int availableHeight -> d
    int paddingVertical -> e
    int paddingHorizontal -> f
    int layout -> g
    boolean isLayoutCenter -> a
    boolean isLayoutRight -> b
    de.enough.polish.ui.Item parentItem -> a
    boolean isFocused -> c
    void init(de.enough.polish.ui.Item,int,int,int) -> a
    void initContent(de.enough.polish.ui.Item,int,int,int) -> b
    void paintContent(de.enough.polish.ui.Item,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void focus(de.enough.polish.ui.Style,int) -> a
    void defocus(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style) -> b
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void addFullRepaintRegion(de.enough.polish.ui.Item,de.enough.polish.ui.ClippingRegion) -> a
    boolean animate() -> a
    void showNotify() -> a
    void hideNotify() -> b
    de.enough.polish.ui.Screen getScreen() -> a
    boolean handleKeyPressed(int,int) -> a
    boolean handleKeyReleased(int,int) -> b
    boolean isValid(de.enough.polish.ui.Item,de.enough.polish.ui.Style) -> a
    void paintBackground(de.enough.polish.ui.Background,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void paintBorder(de.enough.polish.ui.Border,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.MenuBar -> c:
    de.enough.polish.util.IdentityArrayList commandsList -> a
    de.enough.polish.ui.Container commandsContainer -> a
    boolean isOpened -> a
    de.enough.polish.ui.Command singleLeftCommand -> a
    de.enough.polish.ui.CommandItem singleLeftCommandItem -> a
    de.enough.polish.ui.Command singleRightCommand -> b
    de.enough.polish.ui.CommandItem singleRightCommandItem -> b
    de.enough.polish.ui.Command singleMiddleCommand -> c
    int topY -> a
    boolean isSoftKeyPressed -> b
    boolean canScrollDownwards -> c
    boolean canScrollUpwards -> d
    boolean paintScrollIndicator -> e
    javax.microedition.lcdui.Image optionsImage -> a
    boolean showImageAndText -> f
    javax.microedition.lcdui.Image selectImage -> b
    javax.microedition.lcdui.Image cancelImage -> c
    de.enough.polish.ui.Background overlayBackground -> a
    de.enough.polish.util.HashMap allCommands -> a
    de.enough.polish.ui.Style menuItemStyle -> a
    void addCommand(de.enough.polish.ui.Command) -> a
    void addCommand(de.enough.polish.ui.Command,de.enough.polish.ui.Style) -> a
    void removeCommand(de.enough.polish.ui.Command) -> b
    int getNextNegativeOrPositiveCommandIndex(boolean) -> a
    void initContent(int,int,int) -> a
    void paintBackgroundAndBorder(int,int,int,int,javax.microedition.lcdui.Graphics) -> b
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    java.lang.String createCssSelector() -> a
    void setOpen(boolean) -> a
    boolean handleKeyPressed(int,int) -> a
    de.enough.polish.ui.CommandItem getOpenOptionsItem() -> a
    de.enough.polish.ui.CommandItem getCloseOptionsItem() -> b
    boolean isOpenOptionsMenuKey(int,int) -> d
    boolean isCloseOptionsMenuKey(int,int) -> e
    boolean isSelectOptionsMenuKey(int,int) -> f
    void notifyKeyPressed() -> b
    boolean handleKeyReleased(int,int) -> b
    boolean handleKeyRepeated(int,int) -> c
    void setStyle(de.enough.polish.ui.Style) -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void addCommand(de.enough.polish.ui.CommandItem) -> a
    int getSpaceBottom(int,int) -> a
    int size() -> a
    de.enough.polish.ui.Style getMenuItemStyle() -> a
    boolean contains(de.enough.polish.ui.Command) -> a
    void hideNotify() -> a
    void showNotify() -> c
de.enough.polish.ui.NativeDisplay -> l:
    int getColor(int) -> a
    void setCurrent(de.enough.polish.ui.Display) -> a
    void setCurrent(de.enough.polish.ui.Displayable) -> a
    void callSerially(java.lang.Runnable) -> a
de.enough.polish.ui.Screen -> ac:
    de.enough.polish.ui.Item title -> a
    boolean excludeTitleForBackground -> g
    de.enough.polish.ui.Item subTitle -> c
    int subTitleHeight -> a
    int titleHeight -> b
    de.enough.polish.ui.Background background -> a
    int backgroundX -> c
    int backgroundY -> d
    int backgroundWidth -> e
    int backgroundHeight -> f
    de.enough.polish.ui.Border border -> a
    de.enough.polish.ui.Style style -> a
    int screenHeight -> g
    int originalScreenHeight -> h
    int screenWidth -> i
    java.lang.String cssSelector -> a
    de.enough.polish.ui.Screen$ForwardCommandListener forwardCommandListener -> a
    de.enough.polish.ui.Container container -> a
    boolean isLayoutCenter -> h
    boolean isLayoutRight -> i
    boolean isLayoutVCenter -> j
    boolean isLayoutBottom -> k
    boolean isLayoutHorizontalShrink -> l
    boolean isLayoutVerticalShrink -> m
    boolean isInitialized -> a
    int fullScreenHeight -> j
    int menuBarHeight -> k
    de.enough.polish.ui.Command okCommand -> a
    de.enough.polish.ui.MenuBar menuBar -> a
    de.enough.polish.ui.Item focusedItem -> b
    de.enough.polish.ui.ScrollBar scrollBar -> a
    boolean showTitleOrMenu -> n
    de.enough.polish.ui.Item infoItem -> d
    int infoHeight -> l
    int contentX -> m
    int contentY -> n
    int contentWidth -> o
    int contentHeight -> p
    int marginLeft -> q
    int marginRight -> r
    int marginTop -> s
    int marginBottom -> t
    de.enough.polish.ui.ScreenStateListener screenStateListener -> a
    boolean isScreenChangeDirtyFlag -> o
    de.enough.polish.ui.ItemStateListener itemStateListener -> a
    java.lang.Object paintLock -> a
    de.enough.polish.util.ArrayList itemCommands -> a
    long lastInteractionTime -> a
    boolean ignoreRepaintRequests -> b
    boolean isRepaintRequested -> c
    boolean isInitRequested -> d
    de.enough.polish.ui.CommandListener realCommandListener -> a
    boolean isResourcesReleased -> p
    long lastAnimateTime -> b
    boolean isAnimated -> e
    int keyStates -> u
    int releasedKeys -> v
    void init(int,int) -> a
    void requestInit() -> b
    void requestRepaint() -> c
    void requestRepaint(int,int,int,int) -> a
    void calculateContentArea(int,int,int,int) -> b
    void adjustContentArea(int,int,int,int,de.enough.polish.ui.Container) -> a
    void initContent(de.enough.polish.ui.Container) -> a
    void showNotify() -> a
    void hideNotify() -> d
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    boolean animate() -> a
    void paint(javax.microedition.lcdui.Graphics) -> a
    void paintScrollBar(javax.microedition.lcdui.Graphics) -> b
    void paintMenuBar(javax.microedition.lcdui.Graphics) -> c
    void paintTitleAndSubtitle(javax.microedition.lcdui.Graphics) -> d
    void paintBackgroundAndBorder(javax.microedition.lcdui.Graphics) -> e
    void paintScreen(javax.microedition.lcdui.Graphics) -> f
    java.lang.String getTitle() -> b
    void setTitle(java.lang.String) -> b
    void setTitle(java.lang.String,de.enough.polish.ui.Style) -> b
    void keyPressed(int) -> a
    void keyRepeated(int) -> b
    void keyReleased(int) -> c
    java.lang.String createCssSelector() -> a
    de.enough.polish.ui.Item[] getRootItems() -> a
    boolean handleKeyPressed(int,int) -> a
    boolean handleKeyRepeated(int,int) -> b
    boolean handleKeyReleased(int,int) -> c
    void notifyScreenStateChanged() -> e
    void setCommandListener(de.enough.polish.ui.CommandListener) -> a
    de.enough.polish.ui.CommandListener getCommandListener() -> a
    void addCommand(de.enough.polish.ui.Command) -> a
    void addCommand(de.enough.polish.ui.Command,de.enough.polish.ui.Style) -> a
    void removeCommand(de.enough.polish.ui.Command) -> b
    void initMenuBar() -> m
    void setItemCommands(de.enough.polish.util.ArrayList,de.enough.polish.ui.Item) -> a
    void clearItemCommands() -> f
    void removeItemCommands(de.enough.polish.ui.Item) -> a
    void callCommandListener(de.enough.polish.ui.Command) -> c
    boolean handleCommand(de.enough.polish.ui.Command) -> a
    void sizeChanged(int,int) -> sizeChanged
    int getScreenHeight() -> a
    de.enough.polish.ui.Item getCurrentItem() -> a
    boolean isMenuOpened() -> b
    void notifyStateListener(de.enough.polish.ui.Item) -> b
    int getScrollBarWidth() -> b
    int getScreenFullHeight() -> c
    int getScreenFullWidth() -> d
    boolean isGameActionFire(int,int) -> d
    boolean isSoftKeyLeft(int,int) -> e
    boolean isSoftKeyRight(int,int) -> f
    boolean isSoftKey(int,int) -> g
    int getTitleHeight() -> e
de.enough.polish.ui.Screen$ForwardCommandListener -> r:
    de.enough.polish.ui.Screen this$0 -> a
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Displayable) -> commandAction
de.enough.polish.ui.ScreenStateListener -> al:
    void screenStateChanged(de.enough.polish.ui.Screen) -> a
de.enough.polish.ui.ScrollBar -> am:
    int sliderColor -> a
    de.enough.polish.ui.Dimension sliderWidth -> c
    boolean hideSlider -> a
    int sliderY -> b
    int sliderHeight -> c
    int sliderMinHeight -> d
    int scrollBarHeight -> e
    int startOpacity -> f
    boolean isVisible -> b
    boolean overlap -> c
    int screenAvailableContentHeight -> g
    int screenActualContentHeight -> h
    int initScrollBar(int,int,int,int,int,int,int,int) -> a
    void resetAnimation() -> d
    boolean animate() -> a
    void initContent(int,int,int) -> a
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> c
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    java.lang.String createCssSelector() -> a
    void setStyle(de.enough.polish.ui.Style) -> a
de.enough.polish.ui.StringItem -> e:
    java.lang.String text -> a
    java.lang.String[] textLines -> a
    int textColor -> a
    javax.microedition.lcdui.Font font -> a
    de.enough.polish.ui.TextEffect textEffect -> a
    int maxLines -> b
    java.lang.String maxLinesAppendix -> b
    int maxLinesAppendixPosition -> c
    int textLayout -> d
    boolean isTextInitializationRequired -> b
    int lastAvailableContentWidth -> e
    int lastContentWidth -> f
    int lastContentHeight -> g
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void hideNotify() -> a
    void showNotify() -> c
    java.lang.String getText() -> b
    void setText(java.lang.String) -> a
    void setText(java.lang.String,de.enough.polish.ui.Style) -> a
    javax.microedition.lcdui.Font getFont() -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    int getLineHeight() -> a
    int stringWidth(java.lang.String) -> a
    int charWidth(char) -> a
    int getFontHeight() -> b
    void initContent(int,int,int) -> a
    java.lang.String[] wrap(java.lang.String,int,int) -> a
    void setContentWidth(int) -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    java.lang.String createCssSelector() -> a
de.enough.polish.ui.Style -> dy:
    java.lang.Boolean TRUE -> a
    java.lang.Boolean FALSE -> b
    java.lang.String name -> a
    de.enough.polish.ui.Background background -> a
    de.enough.polish.ui.Border border -> a
    javax.microedition.lcdui.Font font -> a
    int layout -> a
    short[] attributeKeys -> a
    java.lang.Object[] attributeValues -> a
    java.lang.String getProperty(int) -> a
    java.lang.Object getObjectProperty(int) -> a
    java.lang.Integer getIntProperty(int) -> a
    de.enough.polish.ui.Color getColorProperty(int) -> a
    java.lang.Boolean getBooleanProperty(int) -> a
    void releaseResources() -> a
    int getFontColor() -> a
    javax.microedition.lcdui.Font getFont() -> a
    int getMargin(de.enough.polish.ui.Dimension,int) -> a
    int getMarginLeft(int) -> a
    int getMarginRight(int) -> b
    int getMarginTop(int) -> c
    int getMarginBottom(int) -> d
    int getPadding(de.enough.polish.ui.Dimension,int) -> b
    int getPaddingLeft(int) -> e
    int getPaddingRight(int) -> f
    int getPaddingTop(int) -> g
    int getPaddingBottom(int) -> h
    int getPaddingHorizontal(int) -> i
    int getPaddingVertical(int) -> j
de.enough.polish.ui.StyleSheet -> q:
    java.util.Hashtable imagesByName -> a
    de.enough.polish.ui.Background triangleDownBackground -> a
    de.enough.polish.ui.Background triangleUpBackground -> b
    de.enough.polish.ui.Background defaultBackground -> c
    de.enough.polish.ui.Border defaultBorder -> a
    de.enough.polish.ui.Style defaultStyle -> a
    de.enough.polish.ui.Style browsertextbolditalicStyle -> b
    de.enough.polish.ui.Style browsertextboldStyle -> c
    de.enough.polish.ui.Style calendarweekdayStyle -> d
    de.enough.polish.ui.Style menubarStyle -> e
    de.enough.polish.ui.Style browsertextitalicStyle -> f
    de.enough.polish.ui.Style titleStyle -> g
    de.enough.polish.ui.Style browseroptionStyle -> h
    de.enough.polish.ui.Style leftcommandStyle -> i
    de.enough.polish.ui.Style scrollbarStyle -> j
    de.enough.polish.ui.Style browseroptionitemStyle -> k
    de.enough.polish.ui.Style browserStyle -> l
    de.enough.polish.ui.Style rssdescriptionalertStyle -> m
    de.enough.polish.ui.Style browsertextStyle -> n
    de.enough.polish.ui.Style menuStyle -> o
    de.enough.polish.ui.Style browserchoicegroupexclusiveStyle -> p
    de.enough.polish.ui.Style browserradioStyle -> q
    de.enough.polish.ui.Style browsertextcodeStyle -> r
    de.enough.polish.ui.Style rightcommandStyle -> s
    de.enough.polish.ui.Style browserchoicegroupmultipleStyle -> t
    de.enough.polish.ui.Style browsercheckboxStyle -> u
    de.enough.polish.ui.Style labelStyle -> v
    de.enough.polish.ui.Style keydimensionStyle -> w
    de.enough.polish.ui.Style keyspacedimensionStyle -> x
    de.enough.polish.ui.Style keyblankStyle -> y
    de.enough.polish.ui.Style keyboardStyle -> z
    de.enough.polish.ui.Style keyboardviewStyle -> A
    de.enough.polish.ui.Style keyboardviewheaderStyle -> B
    de.enough.polish.ui.Style keypressedStyle -> C
    de.enough.polish.ui.Style keyfocusedStyle -> D
    de.enough.polish.ui.Style keyspacepressedStyle -> E
    de.enough.polish.ui.Style keyspacefocusedStyle -> F
    de.enough.polish.ui.Style keyrowfocusedStyle -> G
    de.enough.polish.ui.Style keyboardviewsubmitfocusedStyle -> H
    de.enough.polish.ui.Style keyboardviewsubmitpressedStyle -> I
    de.enough.polish.ui.Style keyboardviewdisplayfocusedStyle -> J
    de.enough.polish.ui.Style menuitemfocusedStyle -> K
    de.enough.polish.ui.Style browserlinkfocStyle -> L
    de.enough.polish.ui.Style calendardayinactivefocusedStyle -> M
    de.enough.polish.ui.Style calendardayfocusedStyle -> N
    de.enough.polish.ui.Style calendarcurrentdayfocusedStyle -> O
    de.enough.polish.ui.Style browserinputfocStyle -> P
    de.enough.polish.ui.Style browserchoicegrouppopupfocusedStyle -> Q
    de.enough.polish.ui.Style calendardayStyle -> R
    de.enough.polish.ui.Style browserchoicegrouppopupStyle -> S
    de.enough.polish.ui.Style calendarcurrentdayStyle -> T
    de.enough.polish.ui.Style browserinputStyle -> U
    de.enough.polish.ui.Style calendardayinactiveStyle -> V
    de.enough.polish.ui.Style menuitemStyle -> W
    de.enough.polish.ui.Style browserlinkStyle -> X
    de.enough.polish.ui.Style keyStyle -> Y
    de.enough.polish.ui.Style keyspaceStyle -> Z
    de.enough.polish.ui.Style keyshiftStyle -> aa
    de.enough.polish.ui.Style keydeleteStyle -> ab
    de.enough.polish.ui.Style keyclearStyle -> ac
    de.enough.polish.ui.Style keyabcStyle -> ad
    de.enough.polish.ui.Style key123Style -> ae
    de.enough.polish.ui.Style keyrowStyle -> af
    de.enough.polish.ui.Style keyboardviewsubmitStyle -> ag
    de.enough.polish.ui.Style keyboardviewdisplayStyle -> ah
    java.util.Hashtable stylesByName -> b
    de.enough.polish.ui.Style focusedStyle -> ai
    de.enough.polish.ui.Screen currentScreen -> a
    de.enough.polish.ui.Display display -> a
    javax.microedition.midlet.MIDlet midlet -> a
    de.enough.polish.ui.AnimationThread animationThread -> a
    de.enough.polish.ui.Command OK_CMD -> a
    de.enough.polish.ui.Command CANCEL_CMD -> b
    void initStyles0() -> b
    javax.microedition.lcdui.Image getImage(java.lang.String,java.lang.Object,boolean) -> a
    de.enough.polish.ui.Style getStyle(de.enough.polish.ui.Item) -> a
    de.enough.polish.ui.Style getStyle(de.enough.polish.ui.Screen) -> a
    void releaseResources() -> a
de.enough.polish.ui.TextEffect -> dz:
    de.enough.polish.ui.Style style -> a
    boolean isTextSensitive -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void onAttach(de.enough.polish.ui.Item) -> a
    void onDetach(de.enough.polish.ui.Item) -> b
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    boolean animate() -> a
    void animate(de.enough.polish.ui.Item,long,de.enough.polish.ui.ClippingRegion) -> a
    void drawStrings(de.enough.polish.ui.Item,java.lang.String[],int,int,int,int,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void drawStrings(java.lang.String[],int,int,int,int,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void drawString(java.lang.String,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void showNotify() -> a
    void hideNotify() -> b
    int stringWidth(java.lang.String) -> a
    int getFontHeight() -> a
    javax.microedition.lcdui.Font getFont() -> a
    java.lang.String[] wrap(java.lang.String,int,javax.microedition.lcdui.Font,int,int,int,java.lang.String,int) -> a
    java.lang.String[] wrap(de.enough.polish.ui.Item,java.lang.String,int,javax.microedition.lcdui.Font,int,int,int,java.lang.String,int) -> a
    void drawChar(char,int,int,int,javax.microedition.lcdui.Graphics) -> a
    int getMaxWidth(de.enough.polish.ui.Item,java.lang.String[]) -> a
de.enough.polish.ui.TextField -> t:
    de.enough.polish.ui.Command CLEAR_CMD -> a
    de.enough.polish.ui.Command DELETE_CMD -> b
    int maxSize -> e
    int constraints -> f
    boolean showCaret -> a
    long lastCaretSwitch -> a
    java.lang.String title -> c
    java.lang.String passwordText -> e
    boolean isPassword -> e
    boolean enableDirectInput -> f
    de.enough.polish.ui.ItemCommandListener additionalItemCommandListener -> b
    de.enough.polish.midp.ui.TextBox midpTextBox -> a
    boolean skipKeyReleasedEvent -> t
    boolean flashCaret -> c
    boolean isUneditable -> d
    boolean isKeyPressedHandled -> u
    int numberOfDecimalFractions -> g
    void createTextBox() -> l
    java.lang.String getString() -> c
    void setString(java.lang.String) -> b
    java.lang.String convertToFixedPointDecimal(java.lang.String) -> a
    void updateDeleteCommand(java.lang.String) -> c
    int size() -> c
    int getCaretPosition() -> d
    void setCaretPosition(int) -> b
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void initContent(int,int,int) -> a
    java.lang.String createCssSelector() -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    boolean animate() -> a
    boolean handleKeyPressed(int,int) -> a
    void showTextBox() -> d
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Displayable) -> commandAction
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Item) -> a
    de.enough.polish.ui.Style focus(de.enough.polish.ui.Style,int) -> a
    void showNotify() -> c
de.enough.polish.ui.UiAccess -> d:
    int[] getRgbData(de.enough.polish.ui.Item,int) -> a
de.enough.polish.ui.backgrounds.BorderedRoundRectBackground -> m:
    int color -> b
    int arcWidth -> c
    int arcHeight -> d
    int borderColor -> e
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.backgrounds.GradientVerticalBackground -> y:
    int topColor -> b
    int bottomColor -> c
    int stroke -> d
    de.enough.polish.ui.Dimension start -> a
    de.enough.polish.ui.Dimension end -> b
    int[] gradient -> a
    int lastHeight -> e
    int startLine -> f
    int endLine -> g
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.backgrounds.SimpleBackground -> at:
    int color -> b
    de.enough.polish.ui.Color colorObj -> a
    boolean isInitialized -> a
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.backgrounds.TranslucentSimpleBackground -> bb:
    int argbColor -> b
    int[] xCoords -> a
    int[] yCoords -> b
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void releaseResources() -> a
de.enough.polish.ui.backgrounds.TriangleBackground -> bc:
    int color -> b
    int orientation -> c
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.borders.RoundRectBorder -> bu:
    int color -> e
    int arcWidth -> f
    int arcHeight -> g
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.borders.SimpleBorder -> bv:
    int color -> e
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.containerviews.HorizontalContainerView -> cp:
    boolean isExpandRightLayout -> l
    boolean isClippingRequired -> m
    void initContent(de.enough.polish.ui.Item,int,int,int) -> b
    de.enough.polish.ui.Style focusItem(int,de.enough.polish.ui.Item,int,de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style) -> b
    void paintContent(de.enough.polish.ui.Container,de.enough.polish.ui.Item[],int,int,int,int,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.texteffects.ShadowTextEffect -> en:
    int shadowColor -> a
    int xOffset -> b
    int yOffset -> c
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    void drawString(java.lang.String,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.util.ArrayList -> eu:
    java.lang.Object[] storedObjects -> a
    int growthFactor -> a
    int size -> b
    int size() -> a
    boolean contains(java.lang.Object) -> a
    java.lang.Object get(int) -> a
    java.lang.Object remove(int) -> b
    boolean remove(java.lang.Object) -> b
    void clear() -> a
    void add(java.lang.Object) -> a
    void add(int,java.lang.Object) -> a
    java.lang.Object set(int,java.lang.Object) -> a
    java.lang.String toString() -> toString
    java.lang.Object[] toArray(java.lang.Object[]) -> a
    void increaseCapacity() -> b
    java.lang.Object[] getInternalArray() -> a
    void addAll(de.enough.polish.util.ArrayList) -> a
    void addAll(java.lang.Object[],int,int) -> a
de.enough.polish.util.DrawUtil -> o:
    int COLOR_BIT_MASK -> a
    byte[][] FILTER_GAUSSIAN_2 -> a
    byte[][] FILTER_GAUSSIAN_3 -> b
    int[] getGradient(int,int,int) -> a
    void getGradient(int,int,int[]) -> a
    int getComplementaryColor(int) -> a
    void drawRgb(int[],int,int,int,int,boolean,javax.microedition.lcdui.Graphics) -> a
    void drawRgb(int[],int,int,int,int,boolean,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.util.HashMap -> ak:
    int loadFactor -> b
    de.enough.polish.util.HashMap$Element[] buckets -> a
    boolean isPowerOfTwo -> a
    int size -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    int size() -> a
    java.lang.Object[] values() -> a
    java.lang.Object[] values(java.lang.Object[]) -> a
    java.lang.String toString() -> toString
    void increaseSize() -> a
de.enough.polish.util.HashMap$Element -> v:
    java.lang.Object key -> a
    int hashCodeValue -> a
    java.lang.Object value -> b
    de.enough.polish.util.HashMap$Element next -> a
de.enough.polish.util.IdentityArrayList -> ex:
    java.lang.Object[] storedObjects -> a
    int growthFactor -> a
    int size -> b
    int size() -> a
    boolean contains(java.lang.Object) -> a
    int indexOf(java.lang.Object) -> a
    java.lang.Object remove(int) -> a
    boolean remove(java.lang.Object) -> b
    void add(java.lang.Object) -> a
    void add(int,java.lang.Object) -> a
    java.lang.String toString() -> toString
    java.lang.Object[] toArray(java.lang.Object[]) -> a
    void increaseCapacity() -> a
    java.lang.Object[] getInternalArray() -> a
de.enough.polish.util.TextUtil -> i:
    java.lang.String[] split(java.lang.String,char) -> a
    java.lang.String[] wrap(java.lang.String,javax.microedition.lcdui.Font,int,int,int,java.lang.String,int) -> a
    void wrap(java.lang.String,javax.microedition.lcdui.Font,int,int,int,de.enough.polish.util.ArrayList,int,int) -> a
    java.lang.String addAppendix(java.lang.String,javax.microedition.lcdui.Font,int,java.lang.String,int) -> a
